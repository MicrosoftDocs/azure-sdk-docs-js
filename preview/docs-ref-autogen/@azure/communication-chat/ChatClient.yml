### YamlMime:TSType
name: ChatClient
uid: '@azure/communication-chat.ChatClient'
package: '@azure/communication-chat'
summary: The client to do chat operations
fullName: ChatClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'ChatClient(string, CommunicationUserCredential, ChatClientOptions)'
    uid: '@azure/communication-chat.ChatClient.constructor'
    package: '@azure/communication-chat'
    summary: Creates an instance of the ChatClient for a given resource and user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ChatClient(url: string, credential: CommunicationUserCredential,
        options?: ChatClientOptions)
      parameters:
        - id: url
          type: string
          description: The url of the Communication Services resouce.
        - id: credential
          type: CommunicationUserCredential
          description: >-
            The user credential. Use AzureCommunicationUserCredential from
            @azure/communication-common to create a credential.
        - id: options
          type: <xref uid="@azure/communication-chat.ChatClientOptions" />
          description: |
            Additional client options.
methods:
  - name: 'createChatThread(CreateChatThreadRequest, CreateChatThreadOptions)'
    uid: '@azure/communication-chat.ChatClient.createChatThread'
    package: '@azure/communication-chat'
    summary: |-
      Creates a chat thread.
      Returns thread client with the id of the created thread.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createChatThread(request: CreateChatThreadRequest, options?:
        CreateChatThreadOptions)
      parameters:
        - id: request
          type: <xref uid="@azure/communication-chat.CreateChatThreadRequest" />
          description: Request for creating a chat thread.
        - id: options
          type: <xref uid="@azure/communication-chat.CreateChatThreadOptions" />
          description: |
            Operation options.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/communication-chat.ChatThreadClient"
          />&gt;
        description: ''
  - name: 'deleteChatThread(string, DeleteChatThreadOptions)'
    uid: '@azure/communication-chat.ChatClient.deleteChatThread'
    package: '@azure/communication-chat'
    summary: Deletes a chat thread.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteChatThread(threadId: string, options?:
        DeleteChatThreadOptions)
      parameters:
        - id: threadId
          type: string
          description: The ID of the thread to delete.
        - id: options
          type: <xref uid="@azure/communication-chat.DeleteChatThreadOptions" />
          description: |
            Operation options.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/communication-chat.OperationResponse"
          />&gt;
        description: ''
  - name: 'getChatThread(string, GetChatThreadOptions)'
    uid: '@azure/communication-chat.ChatClient.getChatThread'
    package: '@azure/communication-chat'
    summary: |-
      Gets a chat thread.
      Returns the chat thread.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChatThread(threadId: string, options?: GetChatThreadOptions)'
      parameters:
        - id: threadId
          type: string
          description: The ID of the thread to get.
        - id: options
          type: <xref uid="@azure/communication-chat.GetChatThreadOptions" />
          description: |
            Operation options.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/communication-chat.GetChatThreadResponse"
          />&gt;
        description: ''
  - name: getChatThreadClient(string)
    uid: '@azure/communication-chat.ChatClient.getChatThreadClient'
    package: '@azure/communication-chat'
    summary: Returns ChatThreadClient with the specific thread id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChatThreadClient(threadId: string)'
      parameters:
        - id: threadId
          type: string
          description: |
            Thread ID for the ChatThreadClient
      return:
        type: >-
          Promise&lt;<xref uid="@azure/communication-chat.ChatThreadClient"
          />&gt;
        description: ''
  - name: listChatThreads(ListChatThreadsOptions)
    uid: '@azure/communication-chat.ChatClient.listChatThreads'
    package: '@azure/communication-chat'
    summary: Gets the list of chat threads of a user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listChatThreads(options?: ListChatThreadsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/communication-chat.ListChatThreadsOptions" />
          description: |
            List chat threads options.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/communication-chat.ChatThreadInfo" />&gt;
        description: ''
  - name: 'off("chatMessageDeleted", (e: ChatMessageDeletedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_2'
    package: '@azure/communication-chat'
    summary: Unsubscribe from chatMessageDeleted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "chatMessageDeleted", listener: (e:
        ChatMessageDeletedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageDeleted"'
          description: The ChatMessageDeletedEvent.
        - id: listener
          type: '(e: ChatMessageDeletedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: 'off("chatMessageEdited", (e: ChatMessageEditedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_1'
    package: '@azure/communication-chat'
    summary: Unsubscribe from chatMessageEdited.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "chatMessageEdited", listener: (e:
        ChatMessageEditedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageEdited"'
          description: The ChatMessageEditedEvent.
        - id: listener
          type: '(e: ChatMessageEditedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: 'off("chatMessageReceived", (e: ChatMessageReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off'
    package: '@azure/communication-chat'
    summary: Unsubscribe from chatMessageReceived.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "chatMessageReceived", listener: (e:
        ChatMessageReceivedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageReceived"'
          description: The ChatMessageReceivedEvent.
        - id: listener
          type: '(e: ChatMessageReceivedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: 'off("readReceiptReceived", (e: ReadReceiptReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_4'
    package: '@azure/communication-chat'
    summary: Unsubscribe from readReceiptReceived.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "readReceiptReceived", listener: (e:
        ReadReceiptReceivedEvent) => void)
      parameters:
        - id: event
          type: '"readReceiptReceived"'
          description: The ReadReceiptReceivedEvent.
        - id: listener
          type: '(e: ReadReceiptReceivedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: 'off("typingIndicatorReceived", (e: TypingIndicatorReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.off_3'
    package: '@azure/communication-chat'
    summary: Unsubscribe from typingIndicatorReceived.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(event: "typingIndicatorReceived", listener: (e:
        TypingIndicatorReceivedEvent) => void)
      parameters:
        - id: event
          type: '"typingIndicatorReceived"'
          description: The TypingIndicatorReceivedEvent.
        - id: listener
          type: '(e: TypingIndicatorReceivedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: 'on("chatMessageDeleted", (e: ChatMessageDeletedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_2'
    package: '@azure/communication-chat'
    summary: |-
      Subscribe function for chatMessageDeleted.
      The initial sender will also receive this event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "chatMessageDeleted", listener: (e:
        ChatMessageDeletedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageDeleted"'
          description: The ChatMessageDeletedEvent.
        - id: listener
          type: '(e: ChatMessageDeletedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: 'on("chatMessageEdited", (e: ChatMessageEditedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_1'
    package: '@azure/communication-chat'
    summary: |-
      Subscribe function for chatMessageEdited.
      The initial sender will also receive this event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "chatMessageEdited", listener: (e:
        ChatMessageEditedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageEdited"'
          description: The ChatMessageEditedEvent.
        - id: listener
          type: '(e: ChatMessageEditedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: 'on("chatMessageReceived", (e: ChatMessageReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on'
    package: '@azure/communication-chat'
    summary: >-
      Subscribe function for chatMessageReceived.

      The initial sender will also receive this event.

      You need to call startRealtimeNotifications before subscribing to any
      event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "chatMessageReceived", listener: (e:
        ChatMessageReceivedEvent) => void)
      parameters:
        - id: event
          type: '"chatMessageReceived"'
          description: The ChatMessageReceivedEvent.
        - id: listener
          type: '(e: ChatMessageReceivedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: 'on("readReceiptReceived", (e: ReadReceiptReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_4'
    package: '@azure/communication-chat'
    summary: Subscribe function for readReceiptReceived.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "readReceiptReceived", listener: (e:
        ReadReceiptReceivedEvent) => void)
      parameters:
        - id: event
          type: '"readReceiptReceived"'
          description: The ReadReceiptReceivedEvent.
        - id: listener
          type: '(e: ReadReceiptReceivedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: 'on("typingIndicatorReceived", (e: TypingIndicatorReceivedEvent) => void)'
    uid: '@azure/communication-chat.ChatClient.on_3'
    package: '@azure/communication-chat'
    summary: |-
      Subscribe function for typingIndicatorReceived.
      The initial sender will also receive this event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function on(event: "typingIndicatorReceived", listener: (e:
        TypingIndicatorReceivedEvent) => void)
      parameters:
        - id: event
          type: '"typingIndicatorReceived"'
          description: The TypingIndicatorReceivedEvent.
        - id: listener
          type: '(e: TypingIndicatorReceivedEvent) =&gt; void'
          description: |
            The listener to handle the event.
  - name: startRealtimeNotifications()
    uid: '@azure/communication-chat.ChatClient.startRealtimeNotifications'
    package: '@azure/communication-chat'
    summary: |-
      Start receiving realtime notifications.
      Call this function before subscribing to any event.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function startRealtimeNotifications()
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: stopRealtimeNotifications()
    uid: '@azure/communication-chat.ChatClient.stopRealtimeNotifications'
    package: '@azure/communication-chat'
    summary: |-
      Stop receiving realtime notifications.
      This function would unsubscribe to all events.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function stopRealtimeNotifications()
      return:
        type: Promise&lt;void&gt;
        description: ''
