### YamlMime:TSType
name: Sender
uid: '@azure/service-bus.Sender'
package: '@azure/service-bus'
summary: >-
  The Sender class can be used to send messages, schedule messages to be sent at
  a later time

  and cancel such scheduled messages.

  Use the `createSender` function on the QueueClient or TopicClient to
  instantiate a Sender.

  The Sender class is an abstraction over the underlying AMQP sender link.
fullName: Sender
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: isClosed
    uid: '@azure/service-bus.Sender.isClosed'
    package: '@azure/service-bus'
    summary: >-
      Returns `true` if either the sender or the client that created it has been
      closed
    fullName: isClosed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: boolean isClosed
      return:
        type: boolean
        description: ''
methods:
  - name: cancelScheduledMessage(Long)
    uid: '@azure/service-bus.Sender.cancelScheduledMessage'
    package: '@azure/service-bus'
    summary: >-
      Cancels a message that was scheduled to appear on a ServiceBus
      Queue/Subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function cancelScheduledMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type: Long
          description: The sequence number of the message to be cancelled.
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
  - name: 'cancelScheduledMessages(Long[])'
    uid: '@azure/service-bus.Sender.cancelScheduledMessages'
    package: '@azure/service-bus'
    summary: >-
      Cancels multiple messages that were scheduled to appear on a ServiceBus
      Queue/Subscription.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function cancelScheduledMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type: 'Long[]'
          description: An Array of sequence numbers of the messages to be cancelled.
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
  - name: close()
    uid: '@azure/service-bus.Sender.close'
    package: '@azure/service-bus'
    summary: >-
      Closes the underlying AMQP sender link.

      Once closed, the sender cannot be used for any further operations.

      Use the `createSender` function on the QueueClient or TopicClient to
      instantiate a new Sender
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function close()
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: open()
    uid: '@azure/service-bus.Sender.open'
    package: '@azure/service-bus'
    summary: >
      Opens the AMQP link to Azure Service Bus from the sender.

      It is not necessary to call this method in order to use the sender. It is

      recommended to call this before your first send() or sendBatch() call if
      you

      want to front load the work of setting up the AMQP link to the service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function open()
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'scheduleMessage(Date, SendableMessageInfo)'
    uid: '@azure/service-bus.Sender.scheduleMessage'
    package: '@azure/service-bus'
    summary: >
      Schedules given message to appear on Service Bus Queue/Subscription at a
      later time.

      Please note that you need to explicitly encode the message body if you
      intend to receive the message using a tool or library other than this
      library.

      For example:
       1. Import DefaultDataTransformer and instantiate.
           ```js
             const dt = new DefaultDataTransformer();
           ```
       2. Use the `encode` method on the transformer to encode the message body before calling the scheduleMessage() method
           ```js
             message.body = dt.encode(message.body);
           ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function scheduleMessage(scheduledEnqueueTimeUtc: Date, message:
        SendableMessageInfo)
      parameters:
        - id: scheduledEnqueueTimeUtc
          type: Date
          description: The UTC time at which the message should be enqueued.
        - id: message
          type: <xref uid="@azure/service-bus.SendableMessageInfo" />
          description: The message that needs to be scheduled.
      return:
        type: Promise&lt;Long&gt;
        description: >-
          Promise<Long> - The sequence number of the message that was scheduled.

          You will need the sequence number if you intend to cancel the
          scheduling of the message.

          Save the `Long` type as-is in your application without converting to
          number. Since JavaScript

          only supports 53 bit numbers, converting the `Long` to number will
          cause loss in precision.
  - name: 'scheduleMessages(Date, SendableMessageInfo[])'
    uid: '@azure/service-bus.Sender.scheduleMessages'
    package: '@azure/service-bus'
    summary: >
      Schedules given messages to appear on Service Bus Queue/Subscription at a
      later time.

      Please note that you need to explicitly encode the message body if you
      intend to receive the message using a tool or library other than this
      library.

      For example:
       1. Import DefaultDataTransformer and instantiate.
           ```js
             const dt = new DefaultDataTransformer();
           ```
       2. Use the `encode` method on the transformer to encode the message body before calling the scheduleMessage() method
           ```js
             message.body = dt.encode(message.body);
           ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages:
        SendableMessageInfo[])
      parameters:
        - id: scheduledEnqueueTimeUtc
          type: Date
          description: The UTC time at which the messages should be enqueued.
        - id: messages
          type: '<xref uid="@azure/service-bus.SendableMessageInfo" />[]'
          description: Array of Messages that need to be scheduled.
      return:
        type: 'Promise&lt;Long[]&gt;'
        description: >-
          Promise<Long[]> - The sequence numbers of messages that were
          scheduled.

          You will need the sequence number if you intend to cancel the
          scheduling of the messages.

          Save the `Long` type as-is in your application without converting to
          number. Since JavaScript

          only supports 53 bit numbers, converting the `Long` to number will
          cause loss in precision.
  - name: send(SendableMessageInfo)
    uid: '@azure/service-bus.Sender.send'
    package: '@azure/service-bus'
    summary: >
      Sends the given message after creating an AMQP Sender link if it doesnt
      already exists.

      To send a message to a `session` and/or `partition` enabled Queue/Topic,
      set the `sessionId`

      and/or `partitionKey` properties respectively on the message.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function send(message: SendableMessageInfo)'
      parameters:
        - id: message
          type: <xref uid="@azure/service-bus.SendableMessageInfo" />
          description: Message to send.
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
  - name: 'sendBatch(SendableMessageInfo[])'
    uid: '@azure/service-bus.Sender.sendBatch'
    package: '@azure/service-bus'
    summary: >
      Sends the given messages in a single batch i.e. in a single AMQP message
      after creating an AMQP

      Sender link if it doesnt already exists.

      - To send messages to a `session` and/or `partition` enabled Queue/Topic,
      set the `sessionId`

      and/or `partitionKey` properties respectively on the messages.

      - When doing so, all

      messages in the batch should have the same `sessionId` (if using sessions)
      and the same

      `partitionKey` (if using partitions).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendBatch(messages: SendableMessageInfo[])'
      parameters:
        - id: messages
          type: '<xref uid="@azure/service-bus.SendableMessageInfo" />[]'
          description: >-
            An array of SendableMessageInfo objects to be sent in a Batch
            message.
      return:
        type: Promise&lt;void&gt;
        description: Promise<void>
