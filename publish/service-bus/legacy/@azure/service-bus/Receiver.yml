### YamlMime:TSType
name: Receiver
uid: '@azure/service-bus.Receiver|legacy'
package: '@azure/service-bus'
summary: >-
  The Receiver class can be used to receive messages in a batch or by
  registering handlers.

  Use the `createReceiver` function on the QueueClient or SubscriptionClient to
  instantiate a Receiver.

  The Receiver class is an abstraction over the underlying AMQP receiver link.
fullName: Receiver
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
  - name: isClosed
    uid: '@azure/service-bus.Receiver.isClosed|legacy'
    package: '@azure/service-bus'
    summary: >-
      Returns `true` if the receiver is closed. This can happen either because
      the receiver

      itself has been closed or the client that created it has been closed.
    fullName: isClosed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: boolean isClosed
      return:
        type: boolean
        description: ''
  - name: receiveMode
    uid: '@azure/service-bus.Receiver.receiveMode|legacy'
    package: '@azure/service-bus'
    summary: Denotes receiveMode of this receiver.
    fullName: receiveMode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: ReceiveMode receiveMode
      return:
        type: <xref uid="@azure/service-bus.ReceiveMode|legacy" />
        description: ''
methods:
  - name: close()
    uid: '@azure/service-bus.Receiver.close|legacy'
    package: '@azure/service-bus'
    summary: >-
      Closes the underlying AMQP receiver link.

      Once closed, the receiver cannot be used for any further operations.

      Use the `createReceiver` function on the QueueClient or SubscriptionClient
      to instantiate

      a new Receiver
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function close()
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: getMessageIterator()
    uid: '@azure/service-bus.Receiver.getMessageIterator|legacy'
    package: '@azure/service-bus'
    summary: >-
      Gets an async iterator over messages from the receiver.

      Throws an error if there is another receive operation in progress on the
      same receiver. If you

      are not sure whether there is another receive operation running, check the
      `isReceivingMessages`

      property on the receiver.


      If the iterator is not able to fetch a new message in over a minute,
      `undefined` will be returned.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getMessageIterator()
      return:
        type: >-
          AsyncIterableIterator&lt;<xref
          uid="@azure/service-bus.ServiceBusMessage|legacy" />&gt;
        description: ''
  - name: isReceivingMessages()
    uid: '@azure/service-bus.Receiver.isReceivingMessages|legacy'
    package: '@azure/service-bus'
    summary: >-
      Indicates whether the receiver is currently receiving messages or not.

      When this returns true, new `registerMessageHandler()` or
      `receiveMessages()` calls cannot be made.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function isReceivingMessages()
      return:
        type: boolean
        description: ''
  - name: receiveDeferredMessage(Long)
    uid: '@azure/service-bus.Receiver.receiveDeferredMessage|legacy'
    package: '@azure/service-bus'
    summary: >-
      Returns a promise that resolves to a deferred message identified by the
      given `sequenceNumber`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type: Long
          description: The sequence number of the message that needs to be received.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/service-bus.ServiceBusMessage|legacy" /> |
          undefined&gt;
        description: |-
          Promise<ServiceBusMessage | undefined>
          - Returns `Message` identified by sequence number.
          - Returns `undefined` if no such message is found.
  - name: 'receiveDeferredMessages(Long[])'
    uid: '@azure/service-bus.Receiver.receiveDeferredMessages|legacy'
    package: '@azure/service-bus'
    summary: >-
      Returns a promise that resolves to an array of deferred messages
      identified by given `sequenceNumbers`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type: 'Long[]'
          description: >-
            An array of sequence numbers for the messages that need to be
            received.
      return:
        type: 'Promise&lt;<xref uid="@azure/service-bus.ServiceBusMessage|legacy" />[]&gt;'
        description: |-
          Promise<ServiceBusMessage[]>
          - Returns a list of messages identified by the given sequenceNumbers.
          - Returns an empty list if no messages are found.
  - name: 'receiveMessages(number, undefined | number)'
    uid: '@azure/service-bus.Receiver.receiveMessages|legacy'
    package: '@azure/service-bus'
    summary: >
      Returns a promise that resolves to an array of messages based on given
      count and timeout over

      an AMQP receiver link from a Queue/Subscription.

      Throws an error if there is another receive operation in progress on the
      same receiver. If you

      are not sure whether there is another receive operation running, check the
      `isReceivingMessages`

      property on the receiver.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?:
        undefined | number)
      parameters:
        - id: maxMessageCount
          type: number
          description: The maximum number of messages to receive from Queue/Subscription.
        - id: maxWaitTimeInSeconds
          type: undefined | number
          description: >-
            The total wait time in seconds until which the receiver will attempt
            to receive specified number of messages.

            If this time elapses before the `maxMessageCount` is reached, then
            messages collected till then will be returned to the user.

            - **Default**: `60` seconds.
      return:
        type: 'Promise&lt;<xref uid="@azure/service-bus.ServiceBusMessage|legacy" />[]&gt;'
        description: >-
          Promise<ServiceBusMessage[]> A promise that resolves with an array of
          Message objects.
  - name: 'registerMessageHandler(OnMessage, OnError, MessageHandlerOptions)'
    uid: '@azure/service-bus.Receiver.registerMessageHandler|legacy'
    package: '@azure/service-bus'
    summary: >
      Registers handlers to deal with the incoming stream of messages over an
      AMQP receiver link

      from a Queue/Subscription.

      To stop receiving messages, call `close()` on the Receiver.

      Throws an error if there is another receive operation in progress on the
      same receiver. If you

      are not sure whether there is another receive operation running, check the
      `isReceivingMessages`

      property on the receiver.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function registerMessageHandler(onMessage: OnMessage, onError: OnError,
        options?: MessageHandlerOptions)
      parameters:
        - id: onMessage
          type: <xref uid="@azure/service-bus.OnMessage|legacy" />
          description: Handler for processing each incoming message.
        - id: onError
          type: <xref uid="@azure/service-bus.OnError|legacy" />
          description: >-
            Handler for any error that occurs while receiving or processing
            messages.
        - id: options
          type: <xref uid="@azure/service-bus.MessageHandlerOptions|legacy" />
          description: >
            Options to control if messages should be automatically completed,
            and/or have

            their locks automatically renewed. You can control the maximum
            number of messages that should

            be concurrently processed. You can also provide a timeout in seconds
            to denote the

            amount of time to wait for a new message before closing the
            receiver.
  - name: renewMessageLock(string | ServiceBusMessage)
    uid: '@azure/service-bus.Receiver.renewMessageLock|legacy'
    package: '@azure/service-bus'
    summary: >-
      Renews the lock on the message for the duration as specified during the
      Queue/Subscription

      creation.

      - Check the `lockedUntilUtc` property on the message for the time when the
      lock expires.

      - If a message is not settled (using either `complete()`, `defer()` or
      `deadletter()`,

      before its lock expires, then the message lands back in the
      Queue/Subscription for the next

      receive operation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function renewMessageLock(lockTokenOrMessage: string |
        ServiceBusMessage)
      parameters:
        - id: lockTokenOrMessage
          type: string | <xref uid="@azure/service-bus.ServiceBusMessage|legacy" />
          description: The `lockToken` property of the message or the message itself.
      return:
        type: Promise&lt;Date&gt;
        description: Promise<Date> - New lock token expiry date and time in UTC format.
