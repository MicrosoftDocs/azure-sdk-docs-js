### YamlMime:TSType
name: KeyVaultAccessControlClient
uid: '@azure/keyvault-admin.KeyVaultAccessControlClient|preview'
package: '@azure/keyvault-admin'
summary: |-
  The KeyVaultAccessControlClient provides methods to manage
  access control and role assignments in any given Azure Key Vault instance.
  The client supports creating, retrieving and deleting roles.
fullName: KeyVaultAccessControlClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      KeyVaultAccessControlClient(string, TokenCredential,
      AccessControlClientOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.constructor|preview'
    package: '@azure/keyvault-admin'
    summary: |-
      Creates an instance of the KeyVaultAccessControlClient.
      Example usage:
      ```ts
      import { KeyVaultAccessControlClient } from "@azure/keyvault-admin";
      import { DefaultAzureCredential } from "@azure/identity";

      let vaultUrl = `https://<MY KEY VAULT HERE>.vault.azure.net`;
      let credentials = new DefaultAzureCredential();

      let client = new KeyVaultAccessControlClient(vaultUrl, credentials);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new KeyVaultAccessControlClient(vaultUrl: string, credential:
        TokenCredential, pipelineOptions?: AccessControlClientOptions)
      parameters:
        - id: vaultUrl
          type: string
          description: >-
            the URL of the Key Vault. It should have this shape:
            https://${your-key-vault-name}.vault.azure.net
        - id: credential
          type: TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type: <xref uid="@azure/keyvault-admin.AccessControlClientOptions|preview" />
          description: ''
properties:
  - name: vaultUrl
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.vaultUrl|preview'
    package: '@azure/keyvault-admin'
    summary: The base URL to the vault
    fullName: vaultUrl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'vaultUrl: string'
      return:
        type: string
        description: ''
methods:
  - name: >-
      createRoleAssignment(RoleAssignmentScope, string, string, string,
      CreateRoleAssignmentOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.createRoleAssignment|preview'
    package: '@azure/keyvault-admin'
    summary: >-
      Creates a role assignment in an Azure Key Vault.

      Example usage:

      ```ts

      const client = new KeyVaultAccessControlClient(url, credentials);

      const roleDefinition = await client.listRoleDefinitions("/").next();

      const principalId = "4871f6a6-374f-4b6b-8b0c-f5d84db823f6";

      const result = await client.createRoleAssignment("/",
      "295c179b-9ad3-4117-99cd-b1aa66cf4517", roleDefinition, principalId);

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createRoleAssignment(roleScope: RoleAssignmentScope, name:
        string, roleDefinitionId: string, principalId: string, options?:
        CreateRoleAssignmentOptions)
      parameters:
        - id: roleScope
          type: <xref uid="@azure/keyvault-admin.RoleAssignmentScope|preview" />
          description: The scope of the role assignment.
        - id: name
          type: string
          description: The name of the role assignment. Must be a UUID.
        - id: roleDefinitionId
          type: string
          description: The role definition ID used in the role assignment.
        - id: principalId
          type: string
          description: >-
            The principal ID assigned to the role. This maps to the ID inside
            the Active Directory. It can point to a user, service principal, or
            security group.
        - id: options
          type: <xref uid="@azure/keyvault-admin.CreateRoleAssignmentOptions|preview" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/keyvault-admin.KeyVaultRoleAssignment|preview"
          />&gt;
        description: ''
  - name: >-
      deleteRoleAssignment(RoleAssignmentScope, string,
      DeleteRoleAssignmentOptions)
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.deleteRoleAssignment|preview'
    package: '@azure/keyvault-admin'
    summary: >-
      Deletes role assignments previously created in an Azure Key Vault.

      Example usage:

      ```ts

      const client = new KeyVaultAccessControlClient(url, credentials);

      const roleAssignment = await client.createRoleAssignment("/",
      "295c179b-9ad3-4117-99cd-b1aa66cf4517");

      const deletedRoleAssignment = const await
      client.deleteRoleAssignment(roleAssignment.properties.roleScope,
      roleAssignment.name);

      console.log(deletedRoleAssignment);

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteRoleAssignment(roleScope: RoleAssignmentScope, name:
        string, options?: DeleteRoleAssignmentOptions)
      parameters:
        - id: roleScope
          type: <xref uid="@azure/keyvault-admin.RoleAssignmentScope|preview" />
          description: The scope of the role assignment.
        - id: name
          type: string
          description: The name of the role assignment.
        - id: options
          type: <xref uid="@azure/keyvault-admin.DeleteRoleAssignmentOptions|preview" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/keyvault-admin.KeyVaultRoleAssignment|preview"
          />&gt;
        description: ''
  - name: 'getRoleAssignment(RoleAssignmentScope, string, GetRoleAssignmentOptions)'
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.getRoleAssignment|preview'
    package: '@azure/keyvault-admin'
    summary: >-
      Gets a role assignments previously created in an Azure Key Vault.

      Example usage:

      ```ts

      const client = new KeyVaultAccessControlClient(url, credentials);

      let roleAssignment = await client.createRoleAssignment("/",
      "295c179b-9ad3-4117-99cd-b1aa66cf4517");

      roleAssignment = const await
      client.getRoleAssignment(roleAssignment.properties.roleScope,
      roleAssignment.name);

      console.log(roleAssignment);

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRoleAssignment(roleScope: RoleAssignmentScope, name: string,
        options?: GetRoleAssignmentOptions)
      parameters:
        - id: roleScope
          type: <xref uid="@azure/keyvault-admin.RoleAssignmentScope|preview" />
          description: The scope of the role assignment.
        - id: name
          type: string
          description: The name of the role assignment.
        - id: options
          type: <xref uid="@azure/keyvault-admin.GetRoleAssignmentOptions|preview" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="@azure/keyvault-admin.KeyVaultRoleAssignment|preview"
          />&gt;
        description: ''
  - name: 'listRoleAssignments(RoleAssignmentScope, ListRoleAssignmentsOptions)'
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.listRoleAssignments|preview'
    package: '@azure/keyvault-admin'
    summary: |-
      Iterates over all of the available role assignments in an Azure Key Vault.
      Example usage:
      ```ts
      let client = new KeyVaultAccessControlClient(url, credentials);
      for await (const roleAssignment of client.listRoleAssignments("/")) {
        console.log("Role assignment: ", roleAssignment);
      }
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listRoleAssignments(roleScope: RoleAssignmentScope, options?:
        ListRoleAssignmentsOptions)
      parameters:
        - id: roleScope
          type: <xref uid="@azure/keyvault-admin.RoleAssignmentScope|preview" />
          description: The scope of the role assignments.
        - id: options
          type: <xref uid="@azure/keyvault-admin.ListRoleAssignmentsOptions|preview" />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/keyvault-admin.KeyVaultRoleAssignment|preview" />&gt;
        description: ''
  - name: 'listRoleDefinitions(RoleAssignmentScope, ListRoleDefinitionsOptions)'
    uid: '@azure/keyvault-admin.KeyVaultAccessControlClient.listRoleDefinitions|preview'
    package: '@azure/keyvault-admin'
    summary: |-
      Iterates over all of the available role definitions in an Azure Key Vault.
      Example usage:
      ```ts
      let client = new KeyVaultAccessControlClient(url, credentials);
      for await (const roleDefinitions of client.listRoleDefinitions("/")) {
        console.log("Role definition: ", roleDefinitions);
      }
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listRoleDefinitions(roleScope: RoleAssignmentScope, options?:
        ListRoleDefinitionsOptions)
      parameters:
        - id: roleScope
          type: <xref uid="@azure/keyvault-admin.RoleAssignmentScope|preview" />
          description: The scope of the role definition.
        - id: options
          type: <xref uid="@azure/keyvault-admin.ListRoleDefinitionsOptions|preview" />
          description: ''
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/keyvault-admin.KeyVaultRoleDefinition|preview" />&gt;
        description: ''
