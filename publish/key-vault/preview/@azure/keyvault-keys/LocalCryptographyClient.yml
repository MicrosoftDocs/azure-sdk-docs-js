### YamlMime:TSType
name: LocalCryptographyClient
uid: '@azure/keyvault-keys.LocalCryptographyClient|preview'
package: '@azure/keyvault-keys'
summary: A client used to perform local cryptographic operations with JSON Web Keys.
fullName: LocalCryptographyClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: LocalCryptographyClient(JsonWebKey)
    uid: '@azure/keyvault-keys.LocalCryptographyClient.constructor|preview'
    package: '@azure/keyvault-keys'
    summary: >-
      Constructs a new instance of the Local Cryptography client for the given
      key.

      Example usage:

      ```ts

      import { LocalCryptographyClient } from "@azure/keyvault-keys";


      const jsonWebKey: JsonWebKey = {
        // ...
      };

      const client = new LocalCryptographyClient(jsonWebKey);

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new LocalCryptographyClient(key: JsonWebKey)'
      parameters:
        - id: key
          type: <xref uid="@azure/keyvault-keys.JsonWebKey|preview" />
          description: The JsonWebKey to use during cryptography operations.
properties:
  - name: key
    uid: '@azure/keyvault-keys.LocalCryptographyClient.key|preview'
    package: '@azure/keyvault-keys'
    summary: 'A JSON Web Key, used for the local cryptography operations.'
    fullName: key
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'key: JsonWebKey'
      return:
        type: <xref uid="@azure/keyvault-keys.JsonWebKey|preview" />
        description: ''
methods:
  - name: 'encrypt(LocalSupportedAlgorithmName, Uint8Array)'
    uid: '@azure/keyvault-keys.LocalCryptographyClient.encrypt|preview'
    package: '@azure/keyvault-keys'
    summary: |-
      Encrypts the given plaintext with the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new LocalCryptographyClient(jsonWebKey);
      let result = await client.encrypt("RSA1_5", Buffer.from("My Message"));
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function encrypt(algorithm: LocalSupportedAlgorithmName, plaintext:
        Uint8Array)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.LocalSupportedAlgorithmName|preview" />
          description: The algorithm to use.
        - id: plaintext
          type: Uint8Array
          description: |
            The text to encrypt.
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.EncryptResult|preview" />&gt;
        description: ''
  - name: 'verifyData(LocalSupportedAlgorithmName, Uint8Array, Uint8Array)'
    uid: '@azure/keyvault-keys.LocalCryptographyClient.verifyData|preview'
    package: '@azure/keyvault-keys'
    summary: |-
      Verify the signed block of data
      Example usage:
      ```ts
      let client = new LocalCryptographyClient(jsonWebKey, credentials);
      let result = await client.verifyData("RS256", signedMessage, signature);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function verifyData(algorithm: LocalSupportedAlgorithmName, data:
        Uint8Array, signature: Uint8Array)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.LocalSupportedAlgorithmName|preview" />
          description: The algorithm to use to verify with.
        - id: data
          type: Uint8Array
          description: The signed block of data to verify.
        - id: signature
          type: Uint8Array
          description: The signature to verify the block against.
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.VerifyResult|preview" />&gt;
        description: ''
  - name: 'wrapKey(LocalSupportedAlgorithmName, Uint8Array)'
    uid: '@azure/keyvault-keys.LocalCryptographyClient.wrapKey|preview'
    package: '@azure/keyvault-keys'
    summary: |-
      Wraps the given key using the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new LocalCryptographyClient(jsonWebKey);
      let result = await client.wrapKey("RSA1_5", keyToWrap);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function wrapKey(algorithm: LocalSupportedAlgorithmName, key:
        Uint8Array)
      parameters:
        - id: algorithm
          type: <xref uid="@azure/keyvault-keys.LocalSupportedAlgorithmName|preview" />
          description: The encryption algorithm to use to wrap the given key.
        - id: key
          type: Uint8Array
          description: The key to wrap.
      return:
        type: Promise&lt;<xref uid="@azure/keyvault-keys.WrapResult|preview" />&gt;
        description: ''
