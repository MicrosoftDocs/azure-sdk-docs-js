### YamlMime:TSType
name: Container
uid: '@azure/storage-blob.Container|legacy'
package: '@azure/storage-blob'
summary: Class representing a Container.
fullName: Container
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Container(StorageClientContext)
    uid: '@azure/storage-blob.Container.constructor|legacy'
    package: '@azure/storage-blob'
    summary: Create a Container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Container(client: StorageClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/storage-blob.StorageClientContext|legacy" />
          description: |
            Reference to the service client.
methods:
  - name: 'acquireLease(ContainerAcquireLeaseOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.acquireLease_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acquireLease(options: ContainerAcquireLeaseOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.ContainerAcquireLeaseOptionalParams|legacy"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: acquireLease(Models.ContainerAcquireLeaseOptionalParams)
    uid: '@azure/storage-blob.Container.acquireLease|legacy'
    package: '@azure/storage-blob'
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function acquireLease(options?:
        Models.ContainerAcquireLeaseOptionalParams)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerAcquireLeaseOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerAcquireLeaseResponse|legacy" />&gt;
        description: Promise<Models.ContainerAcquireLeaseResponse>
  - name: acquireLease(ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.acquireLease_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function acquireLease(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'breakLease(ContainerBreakLeaseOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.breakLease_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function breakLease(options: ContainerBreakLeaseOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerBreakLeaseOptionalParams|legacy" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: breakLease(Models.ContainerBreakLeaseOptionalParams)
    uid: '@azure/storage-blob.Container.breakLease|legacy'
    package: '@azure/storage-blob'
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function breakLease(options?: Models.ContainerBreakLeaseOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerBreakLeaseOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerBreakLeaseResponse|legacy" />&gt;
        description: Promise<Models.ContainerBreakLeaseResponse>
  - name: breakLease(ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.breakLease_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function breakLease(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      changeLease(string, string, ContainerChangeLeaseOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.changeLease_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, options:
        ContainerChangeLeaseOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: leaseId
          type: string
          description: Specifies the current lease ID on the resource.
        - id: proposedLeaseId
          type: string
          description: >-
            Proposed lease ID, in a GUID string format. The Blob service returns
            400

            (Invalid request) if the proposed lease ID is not in the correct
            format. See Guid Constructor

            (String) for a list of valid GUID string formats.
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.ContainerChangeLeaseOptionalParams|legacy"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'changeLease(string, string, Models.ContainerChangeLeaseOptionalParams)'
    uid: '@azure/storage-blob.Container.changeLease|legacy'
    package: '@azure/storage-blob'
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, options?:
        Models.ContainerChangeLeaseOptionalParams)
      parameters:
        - id: leaseId
          type: string
          description: Specifies the current lease ID on the resource.
        - id: proposedLeaseId
          type: string
          description: >-
            Proposed lease ID, in a GUID string format. The Blob service returns
            400

            (Invalid request) if the proposed lease ID is not in the correct
            format. See Guid Constructor

            (String) for a list of valid GUID string formats.
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerChangeLeaseOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerChangeLeaseResponse|legacy" />&gt;
        description: Promise<Models.ContainerChangeLeaseResponse>
  - name: 'changeLease(string, string, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.changeLease_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function changeLease(leaseId: string, proposedLeaseId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: leaseId
          type: string
          description: Specifies the current lease ID on the resource.
        - id: proposedLeaseId
          type: string
          description: >-
            Proposed lease ID, in a GUID string format. The Blob service returns
            400

            (Invalid request) if the proposed lease ID is not in the correct
            format. See Guid Constructor

            (String) for a list of valid GUID string formats.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'create(ContainerCreateOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.create_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(options: ContainerCreateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerCreateOptionalParams|legacy" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: create(Models.ContainerCreateOptionalParams)
    uid: '@azure/storage-blob.Container.create|legacy'
    package: '@azure/storage-blob'
    summary: >-
      creates a new container under the specified account. If the container with
      the same name already

      exists, the operation fails
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(options?: Models.ContainerCreateOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerCreateOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerCreateResponse|legacy" />&gt;
        description: Promise<Models.ContainerCreateResponse>
  - name: create(ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.create_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'deleteMethod(ContainerDeleteMethodOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.deleteMethod_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(options: ContainerDeleteMethodOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.ContainerDeleteMethodOptionalParams|legacy"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: deleteMethod(Models.ContainerDeleteMethodOptionalParams)
    uid: '@azure/storage-blob.Container.deleteMethod|legacy'
    package: '@azure/storage-blob'
    summary: >-
      operation marks the specified container for deletion. The container and
      any blobs contained

      within it are later deleted during garbage collection
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(options?:
        Models.ContainerDeleteMethodOptionalParams)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerDeleteMethodOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerDeleteResponse|legacy" />&gt;
        description: Promise<Models.ContainerDeleteResponse>
  - name: deleteMethod(ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.deleteMethod_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deleteMethod(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      getAccessPolicy(ContainerGetAccessPolicyOptionalParams,
      ServiceCallback<SignedIdentifier[]>)
    uid: '@azure/storage-blob.Container.getAccessPolicy_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAccessPolicy(options:
        ContainerGetAccessPolicyOptionalParams, callback:
        ServiceCallback<SignedIdentifier[]>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-blob.ContainerGetAccessPolicyOptionalParams|legacy" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/storage-blob.SignedIdentifier|legacy"
            />[]&gt;
          description: |
            The callback
  - name: getAccessPolicy(Models.ContainerGetAccessPolicyOptionalParams)
    uid: '@azure/storage-blob.Container.getAccessPolicy|legacy'
    package: '@azure/storage-blob'
    summary: >-
      gets the permissions for the specified container. The permissions indicate
      whether container

      data may be accessed publicly.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAccessPolicy(options?:
        Models.ContainerGetAccessPolicyOptionalParams)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGetAccessPolicyOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerGetAccessPolicyResponse|legacy" />&gt;
        description: Promise<Models.ContainerGetAccessPolicyResponse>
  - name: 'getAccessPolicy(ServiceCallback<SignedIdentifier[]>)'
    uid: '@azure/storage-blob.Container.getAccessPolicy_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAccessPolicy(callback: ServiceCallback<SignedIdentifier[]>)'
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="@azure/storage-blob.SignedIdentifier|legacy"
            />[]&gt;
          description: |
            The callback
  - name: getAccountInfo(msRest.RequestOptionsBase)
    uid: '@azure/storage-blob.Container.getAccountInfo|legacy'
    package: '@azure/storage-blob'
    summary: Returns the sku name and account kind
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAccountInfo(options?: msRest.RequestOptionsBase)'
      parameters:
        - id: options
          type: <xref uid="msRest.RequestOptionsBase" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerGetAccountInfoResponse|legacy" />&gt;
        description: Promise<Models.ContainerGetAccountInfoResponse>
  - name: 'getAccountInfo(RequestOptionsBase, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.getAccountInfo_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAccountInfo(options: RequestOptionsBase, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: getAccountInfo(ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.getAccountInfo_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAccountInfo(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'getProperties(ContainerGetPropertiesOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.getProperties_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options: ContainerGetPropertiesOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.ContainerGetPropertiesOptionalParams|legacy"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: getProperties(Models.ContainerGetPropertiesOptionalParams)
    uid: '@azure/storage-blob.Container.getProperties|legacy'
    package: '@azure/storage-blob'
    summary: >-
      returns all user-defined metadata and system properties for the specified
      container. The data

      returned does not include the container's list of blobs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getProperties(options?:
        Models.ContainerGetPropertiesOptionalParams)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerGetPropertiesOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerGetPropertiesResponse|legacy" />&gt;
        description: Promise<Models.ContainerGetPropertiesResponse>
  - name: getProperties(ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.getProperties_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      listBlobFlatSegment(ContainerListBlobFlatSegmentOptionalParams,
      ServiceCallback<ListBlobsFlatSegmentResponse>)
    uid: '@azure/storage-blob.Container.listBlobFlatSegment_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobFlatSegment(options:
        ContainerListBlobFlatSegmentOptionalParams, callback:
        ServiceCallback<ListBlobsFlatSegmentResponse>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-blob.ContainerListBlobFlatSegmentOptionalParams|legacy"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-blob.ListBlobsFlatSegmentResponse|legacy" />&gt;
          description: |
            The callback
  - name: listBlobFlatSegment(Models.ContainerListBlobFlatSegmentOptionalParams)
    uid: '@azure/storage-blob.Container.listBlobFlatSegment|legacy'
    package: '@azure/storage-blob'
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobFlatSegment(options?:
        Models.ContainerListBlobFlatSegmentOptionalParams)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerListBlobFlatSegmentOptionalParams|legacy" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref uid="Models.ContainerListBlobFlatSegmentResponse"
          />&gt;
        description: Promise<Models.ContainerListBlobFlatSegmentResponse>
  - name: listBlobFlatSegment(ServiceCallback<ListBlobsFlatSegmentResponse>)
    uid: '@azure/storage-blob.Container.listBlobFlatSegment_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobFlatSegment(callback:
        ServiceCallback<ListBlobsFlatSegmentResponse>)
      parameters:
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-blob.ListBlobsFlatSegmentResponse|legacy" />&gt;
          description: |
            The callback
  - name: >-
      listBlobHierarchySegment(string,
      ContainerListBlobHierarchySegmentOptionalParams,
      ServiceCallback<ListBlobsHierarchySegmentResponse>)
    uid: '@azure/storage-blob.Container.listBlobHierarchySegment_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobHierarchySegment(delimiter: string, options:
        ContainerListBlobHierarchySegmentOptionalParams, callback:
        ServiceCallback<ListBlobsHierarchySegmentResponse>)
      parameters:
        - id: delimiter
          type: string
          description: >-
            When the request includes this parameter, the operation returns a
            BlobPrefix

            element in the response body that acts as a placeholder for all
            blobs whose names begin with the

            same substring up to the appearance of the delimiter character. The
            delimiter may be a single

            character or a string.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-blob.ContainerListBlobHierarchySegmentOptionalParams|legacy"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-blob.ListBlobsHierarchySegmentResponse|legacy" />&gt;
          description: |
            The callback
  - name: >-
      listBlobHierarchySegment(string,
      Models.ContainerListBlobHierarchySegmentOptionalParams)
    uid: '@azure/storage-blob.Container.listBlobHierarchySegment|legacy'
    package: '@azure/storage-blob'
    summary: >-
      [Update] The List Blobs operation returns a list of the blobs under the
      specified container
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobHierarchySegment(delimiter: string, options?:
        Models.ContainerListBlobHierarchySegmentOptionalParams)
      parameters:
        - id: delimiter
          type: string
          description: >-
            When the request includes this parameter, the operation returns a
            BlobPrefix

            element in the response body that acts as a placeholder for all
            blobs whose names begin with the

            same substring up to the appearance of the delimiter character. The
            delimiter may be a single

            character or a string.
        - id: options
          type: >-
            <xref uid="Models.ContainerListBlobHierarchySegmentOptionalParams"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="Models.ContainerListBlobHierarchySegmentResponse" />&gt;
        description: Promise<Models.ContainerListBlobHierarchySegmentResponse>
  - name: >-
      listBlobHierarchySegment(string,
      ServiceCallback<ListBlobsHierarchySegmentResponse>)
    uid: '@azure/storage-blob.Container.listBlobHierarchySegment_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function listBlobHierarchySegment(delimiter: string, callback:
        ServiceCallback<ListBlobsHierarchySegmentResponse>)
      parameters:
        - id: delimiter
          type: string
          description: >-
            When the request includes this parameter, the operation returns a
            BlobPrefix

            element in the response body that acts as a placeholder for all
            blobs whose names begin with the

            same substring up to the appearance of the delimiter character. The
            delimiter may be a single

            character or a string.
        - id: callback
          type: >-
            ServiceCallback&lt;<xref
            uid="@azure/storage-blob.ListBlobsHierarchySegmentResponse|legacy" />&gt;
          description: |
            The callback
  - name: >-
      releaseLease(string, ContainerReleaseLeaseOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.releaseLease_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function releaseLease(leaseId: string, options:
        ContainerReleaseLeaseOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: leaseId
          type: string
          description: Specifies the current lease ID on the resource.
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.ContainerReleaseLeaseOptionalParams|legacy"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'releaseLease(string, Models.ContainerReleaseLeaseOptionalParams)'
    uid: '@azure/storage-blob.Container.releaseLease|legacy'
    package: '@azure/storage-blob'
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function releaseLease(leaseId: string, options?:
        Models.ContainerReleaseLeaseOptionalParams)
      parameters:
        - id: leaseId
          type: string
          description: Specifies the current lease ID on the resource.
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerReleaseLeaseOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerReleaseLeaseResponse|legacy" />&gt;
        description: Promise<Models.ContainerReleaseLeaseResponse>
  - name: 'releaseLease(string, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.releaseLease_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function releaseLease(leaseId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: leaseId
          type: string
          description: Specifies the current lease ID on the resource.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      renewLease(string, ContainerRenewLeaseOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.renewLease_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function renewLease(leaseId: string, options:
        ContainerRenewLeaseOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: leaseId
          type: string
          description: Specifies the current lease ID on the resource.
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerRenewLeaseOptionalParams|legacy" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'renewLease(string, Models.ContainerRenewLeaseOptionalParams)'
    uid: '@azure/storage-blob.Container.renewLease|legacy'
    package: '@azure/storage-blob'
    summary: >-
      [Update] establishes and manages a lock on a container for delete
      operations. The lock duration

      can be 15 to 60 seconds, or can be infinite
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function renewLease(leaseId: string, options?:
        Models.ContainerRenewLeaseOptionalParams)
      parameters:
        - id: leaseId
          type: string
          description: Specifies the current lease ID on the resource.
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerRenewLeaseOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerRenewLeaseResponse|legacy" />&gt;
        description: Promise<Models.ContainerRenewLeaseResponse>
  - name: 'renewLease(string, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.renewLease_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function renewLease(leaseId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: leaseId
          type: string
          description: Specifies the current lease ID on the resource.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      setAccessPolicy(ContainerSetAccessPolicyOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.setAccessPolicy_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(options:
        ContainerSetAccessPolicyOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-blob.ContainerSetAccessPolicyOptionalParams|legacy" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: setAccessPolicy(Models.ContainerSetAccessPolicyOptionalParams)
    uid: '@azure/storage-blob.Container.setAccessPolicy|legacy'
    package: '@azure/storage-blob'
    summary: >-
      sets the permissions for the specified container. The permissions indicate
      whether blobs in a

      container may be accessed publicly.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessPolicy(options?:
        Models.ContainerSetAccessPolicyOptionalParams)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerSetAccessPolicyOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerSetAccessPolicyResponse|legacy" />&gt;
        description: Promise<Models.ContainerSetAccessPolicyResponse>
  - name: setAccessPolicy(ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.setAccessPolicy_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setAccessPolicy(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'setMetadata(ContainerSetMetadataOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Container.setMetadata_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(options: ContainerSetMetadataOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.ContainerSetMetadataOptionalParams|legacy"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: setMetadata(Models.ContainerSetMetadataOptionalParams)
    uid: '@azure/storage-blob.Container.setMetadata|legacy'
    package: '@azure/storage-blob'
    summary: >-
      operation sets one or more user-defined name-value pairs for the specified
      container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setMetadata(options?:
        Models.ContainerSetMetadataOptionalParams)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerSetMetadataOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.ContainerSetMetadataResponse|legacy" />&gt;
        description: Promise<Models.ContainerSetMetadataResponse>
  - name: setMetadata(ServiceCallback<void>)
    uid: '@azure/storage-blob.Container.setMetadata_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMetadata(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
