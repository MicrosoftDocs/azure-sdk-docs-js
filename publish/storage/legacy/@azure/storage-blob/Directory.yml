### YamlMime:TSType
name: Directory
uid: '@azure/storage-blob.Directory|legacy'
package: '@azure/storage-blob'
summary: Class representing a Directory.
fullName: Directory
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Directory(StorageClientContext)
    uid: '@azure/storage-blob.Directory.constructor|legacy'
    package: '@azure/storage-blob'
    summary: Create a Directory.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Directory(client: StorageClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/storage-blob.StorageClientContext|legacy" />
          description: |
            Reference to the service client.
methods:
  - name: 'create(DirectoryCreateOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Directory.create_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(options: DirectoryCreateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.DirectoryCreateOptionalParams|legacy" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: create(Models.DirectoryCreateOptionalParams)
    uid: '@azure/storage-blob.Directory.create|legacy'
    package: '@azure/storage-blob'
    summary: >-
      Create a directory. By default, the destination is overwritten and if the
      destination already

      exists and has a lease the lease is broken. This operation supports
      conditional HTTP requests.

      For more information, see [Specifying Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).

      To fail if the destination already exists, use a conditional request with
      If-None-Match: "*".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(options?: Models.DirectoryCreateOptionalParams)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.DirectoryCreateOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.DirectoryCreateResponse|legacy" />&gt;
        description: Promise<Models.DirectoryCreateResponse>
  - name: create(ServiceCallback<void>)
    uid: '@azure/storage-blob.Directory.create_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function create(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      deleteMethod(boolean, DirectoryDeleteMethodOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-blob.Directory.deleteMethod_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(recursiveDirectoryDelete: boolean, options:
        DirectoryDeleteMethodOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: recursiveDirectoryDelete
          type: boolean
          description: |-
            If "true", all paths beneath the directory will be deleted. If
            "false" and the directory is non-empty, an error occurs.
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.DirectoryDeleteMethodOptionalParams|legacy"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'deleteMethod(boolean, Models.DirectoryDeleteMethodOptionalParams)'
    uid: '@azure/storage-blob.Directory.deleteMethod|legacy'
    package: '@azure/storage-blob'
    summary: Deletes the directory
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(recursiveDirectoryDelete: boolean, options?:
        Models.DirectoryDeleteMethodOptionalParams)
      parameters:
        - id: recursiveDirectoryDelete
          type: boolean
          description: |-
            If "true", all paths beneath the directory will be deleted. If
            "false" and the directory is non-empty, an error occurs.
        - id: options
          type: <xref uid="@azure/storage-blob.DirectoryDeleteMethodOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.DirectoryDeleteResponse|legacy" />&gt;
        description: Promise<Models.DirectoryDeleteResponse>
  - name: 'deleteMethod(boolean, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Directory.deleteMethod_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(recursiveDirectoryDelete: boolean, callback:
        ServiceCallback<void>)
      parameters:
        - id: recursiveDirectoryDelete
          type: boolean
          description: |-
            If "true", all paths beneath the directory will be deleted. If
            "false" and the directory is non-empty, an error occurs.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      getAccessControl(DirectoryGetAccessControlOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-blob.Directory.getAccessControl_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAccessControl(options:
        DirectoryGetAccessControlOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-blob.DirectoryGetAccessControlOptionalParams|legacy" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: getAccessControl(Models.DirectoryGetAccessControlOptionalParams)
    uid: '@azure/storage-blob.Directory.getAccessControl|legacy'
    package: '@azure/storage-blob'
    summary: 'Get the owner, group, permissions, or access control list for a directory.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAccessControl(options?:
        Models.DirectoryGetAccessControlOptionalParams)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.DirectoryGetAccessControlOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.DirectoryGetAccessControlResponse|legacy" />&gt;
        description: Promise<Models.DirectoryGetAccessControlResponse>
  - name: getAccessControl(ServiceCallback<void>)
    uid: '@azure/storage-blob.Directory.getAccessControl_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAccessControl(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'rename(string, DirectoryRenameOptionalParams, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Directory.rename_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function rename(renameSource: string, options:
        DirectoryRenameOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: renameSource
          type: string
          description: >-
            The file or directory to be renamed. The value must have the
            following

            format: "/{filesysystem}/{path}".  If "x-ms-properties" is
            specified, the properties will

            overwrite the existing properties; otherwise, the existing
            properties will be preserved.
        - id: options
          type: <xref uid="@azure/storage-blob.DirectoryRenameOptionalParams|legacy" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'rename(string, Models.DirectoryRenameOptionalParams)'
    uid: '@azure/storage-blob.Directory.rename|legacy'
    package: '@azure/storage-blob'
    summary: >-
      Rename a directory. By default, the destination is overwritten and if the
      destination already

      exists and has a lease the lease is broken. This operation supports
      conditional HTTP requests.

      For more information, see [Specifying Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).

      To fail if the destination already exists, use a conditional request with
      If-None-Match: "*".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function rename(renameSource: string, options?:
        Models.DirectoryRenameOptionalParams)
      parameters:
        - id: renameSource
          type: string
          description: >-
            The file or directory to be renamed. The value must have the
            following

            format: "/{filesysystem}/{path}".  If "x-ms-properties" is
            specified, the properties will

            overwrite the existing properties; otherwise, the existing
            properties will be preserved.
        - id: options
          type: <xref uid="@azure/storage-blob.DirectoryRenameOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.DirectoryRenameResponse|legacy" />&gt;
        description: Promise<Models.DirectoryRenameResponse>
  - name: 'rename(string, ServiceCallback<void>)'
    uid: '@azure/storage-blob.Directory.rename_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rename(renameSource: string, callback: ServiceCallback<void>)'
      parameters:
        - id: renameSource
          type: string
          description: >-
            The file or directory to be renamed. The value must have the
            following

            format: "/{filesysystem}/{path}".  If "x-ms-properties" is
            specified, the properties will

            overwrite the existing properties; otherwise, the existing
            properties will be preserved.
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: >-
      setAccessControl(DirectorySetAccessControlOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/storage-blob.Directory.setAccessControl_2|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessControl(options:
        DirectorySetAccessControlOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-blob.DirectorySetAccessControlOptionalParams|legacy" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: setAccessControl(Models.DirectorySetAccessControlOptionalParams)
    uid: '@azure/storage-blob.Directory.setAccessControl|legacy'
    package: '@azure/storage-blob'
    summary: 'Set the owner, group, permissions, or access control list for a directory.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setAccessControl(options?:
        Models.DirectorySetAccessControlOptionalParams)
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.DirectorySetAccessControlOptionalParams|legacy" />
          description: ''
      return:
        type: Promise&lt;<xref uid="@azure/storage-blob.DirectorySetAccessControlResponse|legacy" />&gt;
        description: Promise<Models.DirectorySetAccessControlResponse>
  - name: setAccessControl(ServiceCallback<void>)
    uid: '@azure/storage-blob.Directory.setAccessControl_1|legacy'
    package: '@azure/storage-blob'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setAccessControl(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
